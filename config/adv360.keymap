/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &tog 1                                                       &mo 3          &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                        &kp EQUAL      &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none      &kp LCTRL  &kp LALT          &kp LGUI  &kp RCTRL  &kp MINUS      &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                         &kp LEFT_ALT      &kp LCMD                            &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp SPACE  &kp LCTRL  &mo 1             &mo 2     &kp ENTER  &kp BACKSPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp GRAVE  &kp N1            &kp N2        &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6          &kp KP_NUM      &kp KP_EQUAL  &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q             &kp W         &kp E     &kp R      &kp T   &none                                                    &none      &kp Y           &kp KP_N7       &kp KP_N8     &kp KP_N9        &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A             &kp S         &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z             &kp X         &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N           &kp KP_N1       &kp KP_N2     &kp KP_N3        &kp KP_ENTER     &kp RSHFT
&mo 2      &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &mo 1         &mo 2      &kp ENTER  &kp KP_N0                  &kp UP          &kp DOWN      &kp KP_DOT       &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8     &kp F9     &kp F10               &kp F11                &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans     &trans     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans     &trans     &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans     &trans                &trans                 &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none            &none            &none            &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none            &none            &none            &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none            &none            &none            &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                          &bl BL_INC       &bl BL_DEC       &none  &none  &none
            >;
        };

        both {
            bindings = <
&trans  &trans            &trans            &trans      &trans      &trans      &trans                                      &trans  &trans      &trans      &trans      &trans      &trans       &trans
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &trans                                      &trans  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)   &trans
&trans  &kp LG(A)         &kp LG(S)         &kp LG(D)   &kp LG(F)   &kp LG(G)   &trans  &trans  &trans      &trans  &trans  &trans  &kp LG(H)   &kp LG(J)   &kp LG(K)   &kp LG(L)   &kp LG(SQT)  &trans
&trans  &trans            &trans            &trans      &trans      &trans                      &trans      &trans                  &trans      &trans      &trans      &trans      &trans       &trans
&trans  &trans            &trans            &trans      &trans                  &trans  &trans  &trans      &trans  &trans  &trans              &trans      &trans      &trans      &trans       &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        if-both-select-4 {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
